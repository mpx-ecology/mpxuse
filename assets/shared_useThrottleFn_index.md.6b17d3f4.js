import{_ as p,a as t}from"./chunks/Contributors.vue_vue_type_script_setup_true_lang.049ea2ab.js";import{_ as r,c,b as n,d as s,e as a,a as y,o as i,r as A}from"./app.6d8b6ff3.js";const x=JSON.parse('{"title":"useThrottleFn","description":"","frontmatter":{"category":"Utilities","related":"useDebounceFn"},"headers":[{"level":2,"title":"\u7528\u6CD5","slug":"\u7528\u6CD5","link":"#\u7528\u6CD5","children":[]},{"level":2,"title":"\u63A8\u8350\u9605\u8BFB","slug":"\u63A8\u8350\u9605\u8BFB","link":"#\u63A8\u8350\u9605\u8BFB","children":[]},{"level":2,"title":"\u7C7B\u578B\u58F0\u660E","slug":"\u7C7B\u578B\u58F0\u660E","link":"#\u7C7B\u578B\u58F0\u660E","children":[]},{"level":2,"title":"\u6E90\u7801","slug":"\u6E90\u7801","link":"#\u6E90\u7801","children":[]},{"level":2,"title":"\u8D21\u732E\u8005","slug":"\u8D21\u732E\u8005","link":"#\u8D21\u732E\u8005","children":[]},{"level":2,"title":"\u66F4\u65B0\u65E5\u5FD7","slug":"\u66F4\u65B0\u65E5\u5FD7","link":"#\u66F4\u65B0\u65E5\u5FD7","children":[]}],"relativePath":"shared/useThrottleFn/index.md"}'),D={name:"shared/useThrottleFn/index.md"},d=s("h1",{id:"usethrottlefn",tabindex:"-1"},[a("useThrottleFn "),s("a",{class:"header-anchor",href:"#usethrottlefn","aria-hidden":"true"},"#")],-1),h=y(`<p>\u9650\u5236\u51FD\u6570\u7684\u6267\u884C\u3002\u7279\u522B\u9002\u7528\u4E8E\u5728\u8C03\u6574\u5927\u5C0F\u548C\u6EDA\u52A8\u7B49\u4E8B\u4EF6\u4E0A\u9650\u5236\u5904\u7406\u7A0B\u5E8F\u6267\u884C\u901F\u7387\u3002</p><blockquote><p>Throttle\u662F\u4E00\u4E2A\u6295\u7403\u7684\u5F39\u7C27\uFF1A\u5F53\u7403\u98DE\u51FA\u540E\uFF0C\u5B83\u9700\u8981\u4E00\u4E9B\u65F6\u95F4\u6765\u6536\u7F29\uFF0C\u6240\u4EE5\u9664\u975E\u51C6\u5907\u597D\uFF0C\u5426\u5219\u5B83\u4E0D\u80FD\u518D\u6295\u7403\u3002</p></blockquote><h2 id="\u7528\u6CD5" tabindex="-1">\u7528\u6CD5 <a class="header-anchor" href="#\u7528\u6CD5" aria-hidden="true">#</a></h2><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki vp-code-dark"><code><span class="line"><span style="color:#4D9375;">import</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">{</span><span style="color:#DBD7CAEE;"> </span><span style="color:#BD976A;">useThrottleFn</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">}</span><span style="color:#DBD7CAEE;"> </span><span style="color:#4D9375;">from</span><span style="color:#DBD7CAEE;"> </span><span style="color:#C98A7DAA;">&#39;</span><span style="color:#C98A7D;">@mpxjs/mpxuse-core</span><span style="color:#C98A7DAA;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#CB7676;">const</span><span style="color:#DBD7CAEE;"> </span><span style="color:#BD976A;">throttledFn</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">=</span><span style="color:#DBD7CAEE;"> </span><span style="color:#80A665;">useThrottleFn</span><span style="color:#666666;">(()</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">=&gt;</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">{</span></span>
<span class="line"><span style="color:#666666;">  </span><span style="color:#758575DD;">// do something, it will be called at most 1 time per second</span></span>
<span class="line"><span style="color:#666666;">},</span><span style="color:#DBD7CAEE;"> </span><span style="color:#4C9A91;">1000</span><span style="color:#666666;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#CB7676;">const</span><span style="color:#DBD7CAEE;"> </span><span style="color:#80A665;">onScrolling</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">=</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">()</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">=&gt;</span><span style="color:#DBD7CAEE;"> </span><span style="color:#80A665;">throttledFn</span><span style="color:#666666;">()</span></span>
<span class="line"></span></code></pre><pre class="shiki vp-code-light"><code><span class="line"><span style="color:#1E754F;">import</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">useThrottleFn</span><span style="color:#393A34;"> </span><span style="color:#999999;">}</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">from</span><span style="color:#393A34;"> </span><span style="color:#B56959AA;">&#39;</span><span style="color:#B56959;">@mpxjs/mpxuse-core</span><span style="color:#B56959AA;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#AB5959;">const</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">throttledFn</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#59873A;">useThrottleFn</span><span style="color:#999999;">(()</span><span style="color:#393A34;"> </span><span style="color:#999999;">=&gt;</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#999999;">  </span><span style="color:#A0ADA0;">// do something, it will be called at most 1 time per second</span></span>
<span class="line"><span style="color:#999999;">},</span><span style="color:#393A34;"> </span><span style="color:#2F798A;">1000</span><span style="color:#999999;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#AB5959;">const</span><span style="color:#393A34;"> </span><span style="color:#59873A;">onScrolling</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#999999;">()</span><span style="color:#393A34;"> </span><span style="color:#999999;">=&gt;</span><span style="color:#393A34;"> </span><span style="color:#59873A;">throttledFn</span><span style="color:#999999;">()</span></span>
<span class="line"></span></code></pre></div><h2 id="\u63A8\u8350\u9605\u8BFB" tabindex="-1">\u63A8\u8350\u9605\u8BFB <a class="header-anchor" href="#\u63A8\u8350\u9605\u8BFB" aria-hidden="true">#</a></h2><ul><li><a href="https://redd.one/blog/debounce-vs-throttle" target="_blank" rel="noreferrer"><strong>\u9632\u6296\u4E0E\u8282\u6D41</strong>: \u6700\u7EC8\u89C6\u89C9\u6307\u5357</a></li></ul><h2 id="\u7C7B\u578B\u58F0\u660E" tabindex="-1">\u7C7B\u578B\u58F0\u660E <a class="header-anchor" href="#\u7C7B\u578B\u58F0\u660E" aria-hidden="true">#</a></h2><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki vp-code-dark"><code><span class="line"><span style="color:#758575DD;">/**</span></span>
<span class="line"><span style="color:#758575DD;"> * Throttle execution of a function. Especially useful for rate limiting</span></span>
<span class="line"><span style="color:#758575DD;"> * execution of handlers on events like resize and scroll.</span></span>
<span class="line"><span style="color:#758575DD;"> *</span></span>
<span class="line"><span style="color:#758575DD;"> * </span><span style="color:#666666;">@</span><span style="color:#4D9375;">param</span><span style="color:#758575DD;">   </span><span style="color:#BD976A;">fn</span><span style="color:#758575DD;">             A function to be executed after delay milliseconds. The \`this\` context and all arguments are passed through, as-is,</span></span>
<span class="line"><span style="color:#758575DD;"> *                                    to \`callback\` when the throttled-function is executed.</span></span>
<span class="line"><span style="color:#758575DD;"> * </span><span style="color:#666666;">@</span><span style="color:#4D9375;">param</span><span style="color:#758575DD;">   </span><span style="color:#BD976A;">ms</span><span style="color:#758575DD;">             A zero-or-greater delay in milliseconds. For event callbacks, values around 100 or 250 (or even higher) are most useful.</span></span>
<span class="line"><span style="color:#758575DD;"> *</span></span>
<span class="line"><span style="color:#758575DD;"> * </span><span style="color:#666666;">@</span><span style="color:#4D9375;">param</span><span style="color:#758575DD;"> [trailing=false] if true, call fn again after the time is up</span></span>
<span class="line"><span style="color:#758575DD;"> *</span></span>
<span class="line"><span style="color:#758575DD;"> * </span><span style="color:#666666;">@</span><span style="color:#4D9375;">param</span><span style="color:#758575DD;"> [leading=true] if true, call fn on the leading edge of the ms timeout</span></span>
<span class="line"><span style="color:#758575DD;"> *</span></span>
<span class="line"><span style="color:#758575DD;"> * </span><span style="color:#666666;">@</span><span style="color:#4D9375;">return</span><span style="color:#758575DD;">  A new, throttled, function.</span></span>
<span class="line"><span style="color:#758575DD;"> */</span></span>
<span class="line"><span style="color:#4D9375;">export</span><span style="color:#DBD7CAEE;"> </span><span style="color:#CB7676;">declare</span><span style="color:#DBD7CAEE;"> </span><span style="color:#CB7676;">function</span><span style="color:#DBD7CAEE;"> </span><span style="color:#80A665;">useThrottleFn</span><span style="color:#666666;">&lt;</span><span style="color:#5DA9A7;">T</span><span style="color:#DBD7CAEE;"> </span><span style="color:#CB7676;">extends</span><span style="color:#DBD7CAEE;"> </span><span style="color:#5DA9A7;">FunctionArgs</span><span style="color:#666666;">&gt;(</span></span>
<span class="line"><span style="color:#DBD7CAEE;">  </span><span style="color:#BD976A;">fn</span><span style="color:#666666;">: </span><span style="color:#5DA9A7;">T</span><span style="color:#666666;">,</span></span>
<span class="line"><span style="color:#DBD7CAEE;">  </span><span style="color:#BD976A;">ms</span><span style="color:#CB7676;">?</span><span style="color:#666666;">: </span><span style="color:#5DA9A7;">MaybeComputedRef</span><span style="color:#666666;">&lt;</span><span style="color:#5DA9A7;">number</span><span style="color:#666666;">&gt;,</span></span>
<span class="line"><span style="color:#DBD7CAEE;">  </span><span style="color:#BD976A;">trailing</span><span style="color:#CB7676;">?</span><span style="color:#666666;">: </span><span style="color:#5DA9A7;">boolean</span><span style="color:#666666;">,</span></span>
<span class="line"><span style="color:#DBD7CAEE;">  </span><span style="color:#BD976A;">leading</span><span style="color:#CB7676;">?</span><span style="color:#666666;">: </span><span style="color:#5DA9A7;">boolean</span></span>
<span class="line"><span style="color:#666666;">):</span><span style="color:#DBD7CAEE;"> </span><span style="color:#5DA9A7;">T</span></span>
<span class="line"></span></code></pre><pre class="shiki vp-code-light"><code><span class="line"><span style="color:#A0ADA0;">/**</span></span>
<span class="line"><span style="color:#A0ADA0;"> * Throttle execution of a function. Especially useful for rate limiting</span></span>
<span class="line"><span style="color:#A0ADA0;"> * execution of handlers on events like resize and scroll.</span></span>
<span class="line"><span style="color:#A0ADA0;"> *</span></span>
<span class="line"><span style="color:#A0ADA0;"> * </span><span style="color:#999999;">@</span><span style="color:#1E754F;">param</span><span style="color:#A0ADA0;">   </span><span style="color:#B07D48;">fn</span><span style="color:#A0ADA0;">             A function to be executed after delay milliseconds. The \`this\` context and all arguments are passed through, as-is,</span></span>
<span class="line"><span style="color:#A0ADA0;"> *                                    to \`callback\` when the throttled-function is executed.</span></span>
<span class="line"><span style="color:#A0ADA0;"> * </span><span style="color:#999999;">@</span><span style="color:#1E754F;">param</span><span style="color:#A0ADA0;">   </span><span style="color:#B07D48;">ms</span><span style="color:#A0ADA0;">             A zero-or-greater delay in milliseconds. For event callbacks, values around 100 or 250 (or even higher) are most useful.</span></span>
<span class="line"><span style="color:#A0ADA0;"> *</span></span>
<span class="line"><span style="color:#A0ADA0;"> * </span><span style="color:#999999;">@</span><span style="color:#1E754F;">param</span><span style="color:#A0ADA0;"> [trailing=false] if true, call fn again after the time is up</span></span>
<span class="line"><span style="color:#A0ADA0;"> *</span></span>
<span class="line"><span style="color:#A0ADA0;"> * </span><span style="color:#999999;">@</span><span style="color:#1E754F;">param</span><span style="color:#A0ADA0;"> [leading=true] if true, call fn on the leading edge of the ms timeout</span></span>
<span class="line"><span style="color:#A0ADA0;"> *</span></span>
<span class="line"><span style="color:#A0ADA0;"> * </span><span style="color:#999999;">@</span><span style="color:#1E754F;">return</span><span style="color:#A0ADA0;">  A new, throttled, function.</span></span>
<span class="line"><span style="color:#A0ADA0;"> */</span></span>
<span class="line"><span style="color:#1E754F;">export</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">declare</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">function</span><span style="color:#393A34;"> </span><span style="color:#59873A;">useThrottleFn</span><span style="color:#999999;">&lt;</span><span style="color:#2E808F;">T</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">extends</span><span style="color:#393A34;"> </span><span style="color:#2E808F;">FunctionArgs</span><span style="color:#999999;">&gt;(</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#B07D48;">fn</span><span style="color:#999999;">: </span><span style="color:#2E808F;">T</span><span style="color:#999999;">,</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#B07D48;">ms</span><span style="color:#AB5959;">?</span><span style="color:#999999;">: </span><span style="color:#2E808F;">MaybeComputedRef</span><span style="color:#999999;">&lt;</span><span style="color:#2E808F;">number</span><span style="color:#999999;">&gt;,</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#B07D48;">trailing</span><span style="color:#AB5959;">?</span><span style="color:#999999;">: </span><span style="color:#2E808F;">boolean</span><span style="color:#999999;">,</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#B07D48;">leading</span><span style="color:#AB5959;">?</span><span style="color:#999999;">: </span><span style="color:#2E808F;">boolean</span></span>
<span class="line"><span style="color:#999999;">):</span><span style="color:#393A34;"> </span><span style="color:#2E808F;">T</span></span>
<span class="line"></span></code></pre></div><h2 id="\u6E90\u7801" tabindex="-1">\u6E90\u7801 <a class="header-anchor" href="#\u6E90\u7801" aria-hidden="true">#</a></h2><p><a href="https://github.com/mpx-ecology/mpxuse/blob/master/packages/shared/useThrottleFn/index.ts" target="_blank" rel="noreferrer">\u6E90\u7801</a> \u2022 <a href="https://github.com/mpx-ecology/mpxuse/blob/master/packages/shared/useThrottleFn/index.md" target="_blank" rel="noreferrer">\u6587\u6863</a></p><h2 id="\u8D21\u732E\u8005" tabindex="-1">\u8D21\u732E\u8005 <a class="header-anchor" href="#\u8D21\u732E\u8005" aria-hidden="true">#</a></h2>`,11),u=s("h2",{id:"\u66F4\u65B0\u65E5\u5FD7",tabindex:"-1"},[a("\u66F4\u65B0\u65E5\u5FD7 "),s("a",{class:"header-anchor",href:"#\u66F4\u65B0\u65E5\u5FD7","aria-hidden":"true"},"#")],-1);function f(E,m,g,B,C,b){const l=A("FunctionInfo"),e=p,o=t;return i(),c("div",null,[d,n(l,{fn:"useThrottleFn"}),h,n(e,{fn:"useThrottleFn"}),u,n(o,{fn:"useThrottleFn"})])}const T=r(D,[["render",f]]);export{x as __pageData,T as default};
